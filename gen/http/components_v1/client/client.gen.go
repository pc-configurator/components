// Package http_client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package http_client

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

// Component defines model for Component.
type Component struct {
	Category    *string `json:"category,omitempty"`
	Description *string `json:"description,omitempty"`
	ID          *string `json:"id,omitempty"`
	Name        *string `json:"name,omitempty"`
	Price       *int    `json:"price,omitempty"`
}

// ComponentCreate defines model for ComponentCreate.
type ComponentCreate struct {
	Category    *string `json:"category,omitempty"`
	Description *string `json:"description,omitempty"`
	Name        *string `json:"name,omitempty"`
	Price       *int    `json:"price,omitempty"`
}

// ComponentUpdate defines model for ComponentUpdate.
type ComponentUpdate struct {
	Category    *string `json:"category,omitempty"`
	Description *string `json:"description,omitempty"`
	Name        *string `json:"name,omitempty"`
	Price       *int    `json:"price,omitempty"`
}

// IDResponse defines model for IdResponse.
type IDResponse struct {
	ID *string `json:"id,omitempty"`
}

// GetComponentsAllParams defines parameters for GetComponentsAll.
type GetComponentsAllParams struct {
	Category *string `form:"category,omitempty" json:"category,omitempty"`
}

// PostComponentsJSONRequestBody defines body for PostComponents for application/json ContentType.
type PostComponentsJSONRequestBody = ComponentCreate

// PatchComponentsIDJSONRequestBody defines body for PatchComponentsID for application/json ContentType.
type PatchComponentsIDJSONRequestBody = ComponentUpdate

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PostComponentsWithBody request with any body
	PostComponentsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostComponents(ctx context.Context, body PostComponentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetComponentsAll request
	GetComponentsAll(ctx context.Context, params *GetComponentsAllParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteComponentsID request
	DeleteComponentsID(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetComponentsID request
	GetComponentsID(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchComponentsIDWithBody request with any body
	PatchComponentsIDWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchComponentsID(ctx context.Context, id string, body PatchComponentsIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PostComponentsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostComponentsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostComponents(ctx context.Context, body PostComponentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostComponentsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetComponentsAll(ctx context.Context, params *GetComponentsAllParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetComponentsAllRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteComponentsID(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteComponentsIDRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetComponentsID(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetComponentsIDRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchComponentsIDWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchComponentsIDRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchComponentsID(ctx context.Context, id string, body PatchComponentsIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchComponentsIDRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPostComponentsRequest calls the generic PostComponents builder with application/json body
func NewPostComponentsRequest(server string, body PostComponentsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostComponentsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostComponentsRequestWithBody generates requests for PostComponents with any type of body
func NewPostComponentsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/components")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetComponentsAllRequest generates requests for GetComponentsAll
func NewGetComponentsAllRequest(server string, params *GetComponentsAllParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/components/all")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Category != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "category", runtime.ParamLocationQuery, *params.Category); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteComponentsIDRequest generates requests for DeleteComponentsID
func NewDeleteComponentsIDRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/components/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetComponentsIDRequest generates requests for GetComponentsID
func NewGetComponentsIDRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/components/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchComponentsIDRequest calls the generic PatchComponentsID builder with application/json body
func NewPatchComponentsIDRequest(server string, id string, body PatchComponentsIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchComponentsIDRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPatchComponentsIDRequestWithBody generates requests for PatchComponentsID with any type of body
func NewPatchComponentsIDRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/components/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PostComponentsWithBodyWithResponse request with any body
	PostComponentsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostComponentsResponse, error)

	PostComponentsWithResponse(ctx context.Context, body PostComponentsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostComponentsResponse, error)

	// GetComponentsAllWithResponse request
	GetComponentsAllWithResponse(ctx context.Context, params *GetComponentsAllParams, reqEditors ...RequestEditorFn) (*GetComponentsAllResponse, error)

	// DeleteComponentsIDWithResponse request
	DeleteComponentsIDWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteComponentsIDResponse, error)

	// GetComponentsIDWithResponse request
	GetComponentsIDWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetComponentsIDResponse, error)

	// PatchComponentsIDWithBodyWithResponse request with any body
	PatchComponentsIDWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchComponentsIDResponse, error)

	PatchComponentsIDWithResponse(ctx context.Context, id string, body PatchComponentsIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchComponentsIDResponse, error)
}

type PostComponentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *IDResponse
}

// Status returns HTTPResponse.Status
func (r PostComponentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostComponentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetComponentsAllResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Component
}

// Status returns HTTPResponse.Status
func (r GetComponentsAllResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetComponentsAllResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteComponentsIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteComponentsIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteComponentsIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetComponentsIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Component
}

// Status returns HTTPResponse.Status
func (r GetComponentsIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetComponentsIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchComponentsIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Component
}

// Status returns HTTPResponse.Status
func (r PatchComponentsIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchComponentsIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PostComponentsWithBodyWithResponse request with arbitrary body returning *PostComponentsResponse
func (c *ClientWithResponses) PostComponentsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostComponentsResponse, error) {
	rsp, err := c.PostComponentsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostComponentsResponse(rsp)
}

func (c *ClientWithResponses) PostComponentsWithResponse(ctx context.Context, body PostComponentsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostComponentsResponse, error) {
	rsp, err := c.PostComponents(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostComponentsResponse(rsp)
}

// GetComponentsAllWithResponse request returning *GetComponentsAllResponse
func (c *ClientWithResponses) GetComponentsAllWithResponse(ctx context.Context, params *GetComponentsAllParams, reqEditors ...RequestEditorFn) (*GetComponentsAllResponse, error) {
	rsp, err := c.GetComponentsAll(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetComponentsAllResponse(rsp)
}

// DeleteComponentsIDWithResponse request returning *DeleteComponentsIDResponse
func (c *ClientWithResponses) DeleteComponentsIDWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteComponentsIDResponse, error) {
	rsp, err := c.DeleteComponentsID(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteComponentsIDResponse(rsp)
}

// GetComponentsIDWithResponse request returning *GetComponentsIDResponse
func (c *ClientWithResponses) GetComponentsIDWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetComponentsIDResponse, error) {
	rsp, err := c.GetComponentsID(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetComponentsIDResponse(rsp)
}

// PatchComponentsIDWithBodyWithResponse request with arbitrary body returning *PatchComponentsIDResponse
func (c *ClientWithResponses) PatchComponentsIDWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchComponentsIDResponse, error) {
	rsp, err := c.PatchComponentsIDWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchComponentsIDResponse(rsp)
}

func (c *ClientWithResponses) PatchComponentsIDWithResponse(ctx context.Context, id string, body PatchComponentsIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchComponentsIDResponse, error) {
	rsp, err := c.PatchComponentsID(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchComponentsIDResponse(rsp)
}

// ParsePostComponentsResponse parses an HTTP response from a PostComponentsWithResponse call
func ParsePostComponentsResponse(rsp *http.Response) (*PostComponentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostComponentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest IDResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetComponentsAllResponse parses an HTTP response from a GetComponentsAllWithResponse call
func ParseGetComponentsAllResponse(rsp *http.Response) (*GetComponentsAllResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetComponentsAllResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Component
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteComponentsIDResponse parses an HTTP response from a DeleteComponentsIDWithResponse call
func ParseDeleteComponentsIDResponse(rsp *http.Response) (*DeleteComponentsIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteComponentsIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetComponentsIDResponse parses an HTTP response from a GetComponentsIDWithResponse call
func ParseGetComponentsIDResponse(rsp *http.Response) (*GetComponentsIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetComponentsIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Component
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchComponentsIDResponse parses an HTTP response from a PatchComponentsIDWithResponse call
func ParsePatchComponentsIDResponse(rsp *http.Response) (*PatchComponentsIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchComponentsIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Component
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
